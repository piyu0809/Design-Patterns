package genericCheckpointing.util;

import java.io.IOException;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import genericCheckpointing.driver.Driver;
import genericCheckpointing.xmlStoreRestore.StoreRestoreHandler;

public class XMLSerialization implements SerStrategy {

	// FileProcessor p=new FileProcessor();
	@Override
	public void processInput(SerializableObject obj) {
		SerializeTypes p=new SerializeTypes();
		Class<?> cls = obj.getClass();
		Field[] list = obj.getClass().getDeclaredFields();
		Driver.handler.writeToFile("<DPSerialization>");
		Driver.handler.writeToFile("<complexType xsi:type=" + cls + ">");
	
		for (int i = 0; i < list.length; i++) {
			Field fld = list[i];

			String fieldName = fld.getName();
			String methodName = "get" + fieldName;
			
			try {
				Method getterMethod = cls.getMethod(methodName);
				Object invokeRet = getterMethod.invoke(obj);
				if (fld.getType() == Integer.TYPE) {
                String line=p.serializeInt(fieldName, (int) invokeRet);
                Driver.handler.writeToFile(line);
				}
				else if (fld.getType() == String.class) {
	                String line=p.serializeString(fieldName, (String) invokeRet);
	                Driver.handler.writeToFile(line);
					}
				else if (fld.getType() == float.class) {
	                String line=p.serializeFloat(fieldName, (float) invokeRet);
	                Driver.handler.writeToFile(line);
					}
				else if (fld.getType() == double.class) {
	                String line=p.serializeDouble(fieldName, (double) invokeRet);
	                Driver.handler.writeToFile(line);
					}
				else if (fld.getType() == short.class) {
	                String line=p.serializeShort(fieldName, (short) invokeRet);
	                Driver.handler.writeToFile(line);
					}
				else if (fld.getType() == long.class) {
	                String line=p.serializeLong(fieldName, (long) invokeRet);
	                Driver.handler.writeToFile(line);
					}
				else if (fld.getType() == boolean.class) {
	                String line=p.serializeBool(fieldName, (boolean) invokeRet);
	                Driver.handler.writeToFile(line);
					}
				else if (fld.getType() == char.class) {
	                String line=p.serializeChar(fieldName, (char) invokeRet);
	                Driver.handler.writeToFile(line);
					}
			} catch (NoSuchMethodException e) {
				e.printStackTrace();
			} catch (SecurityException e) {
				e.printStackTrace();
			} catch (IllegalAccessException e) {
				e.printStackTrace();
			} catch (IllegalArgumentException e) {
				e.printStackTrace();
			} catch (InvocationTargetException e) {
				e.printStackTrace();
			}
			
		}
		Driver.handler.writeToFile("</DPSerialization>");
	}

}
