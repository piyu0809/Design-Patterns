package genericCheckpointing.util;

import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import genericCheckpointing.driver.Driver;
import genericCheckpointing.xmlStoreRestore.StoreRestoreHandler;

public class XMLdeserialization implements SerStrategy {

	@Override
	public SerializableObject processInput(SerializableObject sObject) {
		DeserializeTypes d=new DeserializeTypes();
		String s1=Driver.handler.lineFromFile(); //<DPSerialization ignored
		String s2=Driver.handler.lineFromFile();
		Class class1 = null;
		
		//<complexType xsi:type="genericCheckpointing.util.MyAllTypesFirst">
	    String[] className1=s2.split("\"");
	   // String[] className2=className1[2].split(">");
	    String className=className1[1];
	   
	    try {
			class1 = Class.forName(className);
			sObject=(SerializableObject) class1.newInstance();
		} catch (ClassNotFoundException e) {
			
			e.printStackTrace();
		} catch (InstantiationException e) {
			
			e.printStackTrace();
		} catch (IllegalAccessException e) {
			
			e.printStackTrace();
		}
	    while(!(s2 = Driver.handler.lineFromFile()).equals("</DPSerialization>")){
			if(s2.equals("</complexType>")){
				continue;
			}
			//< myInt xsi:type="xsd:int">314 </myInt>
			String[] list=s2.split("<");
			String[] list2=list[1].split(" ");
		    String type1=s2.substring(s2.indexOf("\""), s2.indexOf(">")-1);
		    
		    String type=type1.substring(type1.indexOf(":")+1, type1.length());
		   
			String fldName=list2[0];
			
			String value=list2[1].substring(list2[1].indexOf(">")+1,list2[1].length());
			
			try {
				Field fld=class1.getDeclaredField(fldName);
				Class fldType = fld.getType();
				
				Method method = class1.getMethod("set" + fldName, fldType);
				
					try {
						if(type.equals("int")) {
							int val;
						 if(value.equals("")) {
						val=0;
						}
						else { val=d.deserializeInt(value);
						
						}
						 method.invoke(sObject, val);
						}
						else if(type.equals("float"))
						{
							float val=d.deserializeFloat(value);
							method.invoke(sObject, val);
						}
						else if(type.equals("string"))
						{
							method.invoke(sObject, value);
						}
						else if(type.equals("char"))
						{   
							char val=value.charAt(0);
							method.invoke(sObject, val);
						}
						else if(type.equals("long"))
						{   
							long val;
							 if(value.equals("")) {
									val=0;
									}
							 else {
								 val=d.deserializeLong(value);}
							method.invoke(sObject, val);
						}
						else if(type.equals("short"))
						{
							short val=d.deserializeShort(value);
							method.invoke(sObject, val);
						}
						else if(type.equals("double"))
						{
							double val;
							 if(value.equals("")) {
									val=0.0;
									}
							 val=d.deserializeDouble(value);
							method.invoke(sObject, val);
						}
						else if(type.equals("boolean"))
						{
							boolean val=d.deserializeBool(value);
							method.invoke(sObject, val);
						}
						
					} catch (IllegalAccessException e) {
						e.printStackTrace();
					} catch (IllegalArgumentException e) {
						e.printStackTrace();
					} catch (InvocationTargetException e) {
						e.printStackTrace();
					}
				
				
				
			} catch (NoSuchFieldException e) {
				continue;
				//e.printStackTrace();
			} catch (SecurityException e) {
				
				e.printStackTrace();
			} catch (NoSuchMethodException e) {
				e.printStackTrace();
			}
			
	    }
	    //System.out.println(sObject);
		return sObject;
	}

}
